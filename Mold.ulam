local typedef ColorUtils CU;

/**
   \symbol MP
   \color #462
 */
element MoldParameters {
  /**
     \range 1..100
   */
  parameter Unsigned pColorChangeMax = 10;
}

/**
   \symbol Mo
   \color #462
 */
element Mold {
  typedef C2D.Dir Dir;
  // typedef CU.ARGB ARGB;
  typedef Int(4) DirDiff;
  typedef Unsigned(2) DirIndex;

  constant DirIndex cDIR_NUM = 2u;

  ARGB mColor = { 0xff, 0x88, 0x88, 0x88 };

  Bool mIsOriented = false;
  Dir mDirs[cDIR_NUM];

  @Override virtual Void behave() {
    orient();
    grow();
  }

  @Override virtual Void renderGraphics() {
    if (!mIsOriented)
      return;

    Drawable drawable;
    if (!drawable.canDraw())
      return;

    for (DirIndex i = 0u; i < cDIR_NUM; ++i) {
      C2D start;
      C2D end = getCoord(mDirs[i]) * Drawable.cUNITS_PER_SITE / 2;
      ColorUtils cu;
      ARGB oncol = getLineColor();
      ARGB offcol = oncol;
      drawable.drawMaskedLine(start,end,oncol,offcol,0xf0f0f0f0);
    }
  }

  @Override virtual ARGB getColor(Unsigned selector) {
    return mColor;
  }

  Void orient() {
    Random rand;
    if (!mIsOriented) {
      mDirs[0] = (Dir) rand.between(0, 7);
      mDirs[1] = rotate(mDirs[0], 4);
      mIsOriented = true;
    }

    Dir dirs[cDIR_NUM];
    for (DirIndex i = 0u; i < cDIR_NUM; ++i)
      dirs[i] = updateDir(mDirs[i]);

    if (dirs[1] == dirs[0]) {
      // ??
      dirs[1] = rotate(dirs[0], 4);
    }

    for (DirIndex i = 0u; i < cDIR_NUM; ++i)
      mDirs[i] = dirs[i];
  }

  Void grow() {
    for (DirIndex i = 0u; i < cDIR_NUM; ++i)
      growDir(mDirs[i]);
  }

  Void growDir(Dir dir) {
    C2D coord = getCoord(dir);
    EventWindow ew;
    if (ew.isEmpty(coord)) {
      Mold mold;
      mold.mColor = getChildColor();
      mold.mDirs[0] = dir;
      mold.mDirs[1] = rotate(dir, 4);
      ew[coord] = mold;
    }
  }

  ARGB getLineColor() {
    ARGB color = mColor;
    for (Unsigned i = 1; i < 4u; i++)
      color[i] = (Unsigned(8)) ( ~ (Bits(8)) color[i]);
    return color;
  }

  ARGB getChildColor() {
    MoldParameters params;
    Unsigned maxDiff = params.pColorChangeMax;

    Random random;
    ARGB color = mColor;
    for (Unsigned i = 1; i < 4u; i++) {
      Int value = ((Int) color[i]) + random.between(- (Int) maxDiff, (Int) maxDiff);
      color[i] = (Unsigned(8)) value;
    }
    return color;
  }

  Dir updateDir(Dir dir) {
    C2D fs = getForwardCoord(dir);
    C2D ls = getLeftCoord(dir);
    C2D rs = getRightCoord(dir);
    Unsigned fw = getWeight(fs);
    Unsigned lw = getWeight(ls);
    Unsigned rw = getWeight(rs);

    Int rot = 0;
    if (fw < lw || fw < rw) {
      if (lw == rw) {
        Random rand;
        rot = rand.oneIn(2) ? 1 : -1;
      } else if (lw > rw) {
        rot = -1;
      } else {
        rot = 1;
      }
    }
    return rotate(dir, rot);
  }

  C2D getForwardCoord(Dir dir) {
    C2D origin;
    return origin.corner(dir);
  }

  C2D getLeftCoord(Dir dir) {
    return getOffCoord(dir, -1);
  }

  C2D getRightCoord(Dir dir) {
    return getOffCoord(dir, 1);
  }

  Unsigned getWeight(C2D coord) {
    EventWindow ew;
    Atom atom = ew[coord];
    if (atom as Mold)
      return 10u; // TODO
    return 0u;
  }

  C2D getOffCoord(Dir dir, Int rot) {
    // Assert(abs(rot) == 1);
    dir = rotate(dir, rot);
    C2D coord = getCoord(dir);
    while (coord.length() > 4u) {
      dir = rotate(dir, rot);
      coord = getCoord(dir);
    }
    return coord;
  }

  C2D getCoord(Dir dir) {
    C2D origin;
    return origin.neighbor(dir);
  }

  Dir rotate(Dir dir, Int rot) {
    return (Dir) ((dir + rot) % 8);
  }
}
